function randomWaitFor(fromMS = 0, toMS = 1500) {
    return new Promise<void>((resolve) => {
        setTimeout(resolve, Math.floor(Math.random() * toMS + fromMS));
    })
}

function randomWaitForWithRandomError(fromMS = 0, toMS = 1500, errorRate = 0.2) {
    return new Promise<void>((resolve, reject) => {
        setTimeout(() => {
            Math.random() < errorRate ? reject(new Error('随机的模拟错误。')) : resolve();
        }, Math.floor(Math.random() * toMS + fromMS));
    })
}

type BlogPostSearchQuery = {
    author: string;
    tag: string;
    category: string;
    searchText: string;
    perPage: number;
    thisPage: number;
};


// 这里是程序直接调用的接口部分。在这里完成请求的包装变换和适配。
export class APIService {
    static requestCache: ({ [key: string]: string })[];

    /** 获取分类列表 */
    static async getBlogCategoryList(): Promise<CategoryListData> {

    }

    /** 获取标签列表 */
    static async getBlogTagList(): Promise<TagListData> {

    }

    /** 按查询条件查询卡片列表 */
    static async getBlogSummaryList(query: Partial<BlogPostSearchQuery> & Required<{ perPage: number; thisPage: number; }>): Promise<{ data: BlogSummaryData[]; total: number; }> {

    };

    /** 拉取完整文章信息 */
    static async getBlogFullDataById(id: number | string): Promise<BlogPostData> {

    };

    /** 注册 */
    static async register(username: string, password: string, code: string): Promise<void> {

    };

    /** 用户名密码登录、并获取当前已登录的用户信息 */
    static async loginViaUsernameAndPassword(username: string, password: string): Promise<BlogUserCore & BlogUserData> {

    };

    /** 修改密码 */
    static async changePassword(newPassword: string): Promise<void> {

    };


    /** 获取当前已登录的用户的状态，未登录返回空 */
    static async checkCurrentUser(): Promise<null | (BlogUserCore & BlogUserData)> {

    }

    /** 拉取指定用户名的用户个人信息 */
    static async getUserProfile(username: string): Promise<BlogUserCore & BlogUserData> {

    }

    /** 注销 */
    static async signoff(): Promise<void> {

    };

    /** 发布博客, 返回新的文章 ID */
    static async postArticle(data: BlogPostEditorData): Promise<number> {

    }

    /** 修改博客, 需要提供目标的 ID */
    static async updateArticle(data: BlogPostEditorData & { id: number; }): Promise<number> {

    }

    /** 按 ID 删除。只有管理员或发布者可以操作对应的文章 */
    static async deleteArticle(id: number): Promise<void> {

    }

    /** 图片文件上传 */
    static async uploadImageFile(fileObject: File): Promise<string> {

    }

    /** 拼接资源 URL */
    static parseResourceUrl(path: string) {

    }

    /** 拉取评论 */
    static async getCommentsForBlog(blogId: number, page: number, perPage: number): Promise<{ data: BlogComment[], total: number }> {

    }

    /** 拉取待审核的评论 */
    static async getToBeVerifiedComments(page: number, perPage: number): Promise<{ data: BlogComment[], total: number }> {

    }

    /** 拉取已审核评论 */
    static async getVerifiedComments(page: number, perPage: number): Promise<{ data: BlogComment[], total: number }> {

    }

    /** 发布评论 */
    static async postComment(content: string, toBlogId: number, replyToCommentId?: number): Promise<void> {

    }

    /** 通过审核评论 */
    static async adminValidateComment(commentId: number, undo = false): Promise<void> {

    }

    /** 删除评论 */
    static async deleteComment(commentId: number): Promise<void> {

    }

    /** 修改个人资料 */
    static async updateProfile(profile: Partial<BlogUserData>): Promise<Partial<BlogUserData>> {

    }

    /** 头像上传 */
    static async updateAvatar(fileObject: File): Promise<string> {

    }
};